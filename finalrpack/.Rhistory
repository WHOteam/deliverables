errorrate[i] <- 1 - sum(forest$predicted==psych$Diag2)/103
}
plot(10*(1:100),errorrate)
print(min(errorrate))
psych[,c(2,3,5:37)]
errorrate <- c()
for (i in 1:100)
{
forest <- randomForest(psych[,c(2,3,5:37)],factor(psych$Diag2),ntree=i*10)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag2)/103
}
plot(10*(1:100),errorrate)
print(min(errorrate))
min(1:5)
min(errorrate)
errorrate
i = 1
i = 10
forest <- randomForest(psych[,c(2,3,5:37)],factor(psych$Diag2),ntree=i*10)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag2)/103
errorrate
sum(forest$predicted==psych$Diag2)
1 - 65/103
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag2)/103
errorrate
i
i = 1
forest <- randomForest(psych[,c(2,3,5:37)],factor(psych$Diag2),ntree=i*10)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag2)/103
errorrate
sum(forest$predicted==psych$Diag2)
forest$predicted
which(is.na(psych[6,]))
require(randomForest)
# for task classify into 1, 2, 3
errorrate <- c()
for (i in 3:103)
{
forest <- randomForest(psych[,2:37],factor(psych$Diag),ntree=i*10)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag)/103
}
plot(10*(3:103),errorrate)
print(min(errorrate))
psych
psych[,2:37]
psych$Diag
length(psych$Diag)
plot(10*(3:103))
length(10*(3:103))
plot(10*(3:102),errorrate)
length(errorrate)
length(3:102)
errorrate <- c()
for (i in 3:102)
{
forest <- randomForest(psych[,2:37],factor(psych$Diag),ntree=i*10)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag)/103
}
plot(10*(3:102),errorrate)
print(min(errorrate))
length(error)
length(errorrate)
length(10*(3:102))
i
errorrate <- c()
for (i in 3:102)
{
forest <- randomForest(psych[,2:37],factor(psych$Diag),ntree=i*10)
errorrate[i-2] <- 1 - sum(forest$predicted==psych$Diag)/103
}
plot(10*(3:102),errorrate)
print(min(errorrate))
errorrate <- c()
for (i in 3:102)
{
forest <- randomForest(psych[,c(2,3,5:37)],factor(psych$Diag2),ntree=i*10)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag2)/103
}
plot(10*(3:102),errorrate)
print(min(errorrate))
errorrate <- c()
for (i in 3:102)
{
forest <- randomForest(psych[,c(2,3,5:37)],factor(psych$Diag2),ntree=i*10)
errorrate[i-2] <- 1 - sum(forest$predicted==psych$Diag2)/103
}
plot(10*(3:102),errorrate)
print(min(errorrate))
errorrate <- c()
for (i in 1:35)
{
forest <- randomForest(psych[,2:37],factor(psych$Diag),ntree=350,mtry=i)
errorrate[i-2] <- 1 - sum(forest$predicted==psych$Diag)/103
}
plot(1:35,errorrate)
print(min(errorrate))
length(errorrate)
errorrate <- c()
for (i in 1:35)
{
forest <- randomForest(psych[,2:37],factor(psych$Diag),ntree=350,mtry=i)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag)/103
}
plot(1:35,errorrate)
print(min(errorrate))
which(errorrate==min(errorrate))
errorrate(20)
errorrate[20]
errorrate[28]
errorrate <- c()
for (i in 3:102)
{
forest <- randomForest(psych[,c(2,3,5:37)],factor(psych$Diag2),ntree=i*10,mtry=20)
errorrate[i-2] <- 1 - sum(forest$predicted==psych$Diag2)/103
}
plot(10*(3:102),errorrate)
print(min(errorrate))
errorrate <- c()
for (i in 3:102)
{
forest <- randomForest(psych[,2:37],factor(psych$Diag),ntree=i*10,mtry=20)
errorrate[i-2] <- 1 - sum(forest$predicted==psych$Diag)/103
}
plot(10*(3:102),errorrate)
print(min(errorrate))
errorrate <- c()
for (i in 1:35)
{
forest <- randomForest(psych[,2:37],factor(psych$Diag),ntree=350,mtry=i)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag2)/103
}
plot(1:35,errorrate)
print(min(errorrate))
errorrate <- c()
for (i in 1:35)
{
forest <- randomForest(psych[,2:37],factor(psych$Diag2),ntree=350,mtry=i)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag2)/103
}
plot(1:35,errorrate)
print(min(errorrate))
errorrate <- c()
for (i in 1:35)
{
forest <- randomForest(psych[,c(2,3,5:37)],factor(psych$Diag2),ntree=350,mtry=i)
errorrate[i] <- 1 - sum(forest$predicted==psych$Diag2)/103
}
plot(1:35,errorrate)
print(min(errorrate))
source('C:/Users/Shanbogen/Dropbox/Data Mining final project/rando_forests.R')
install.packages("boost")
psych <- read.csv("~/Schoolwork/Data Mining/final/psych.csv")
viewData(psych)
library(boost)
install.packages("boost")
library(ada)
install.packages("ada")
library(ada)
Diag2 <- c(rep(0,32),rep(1,71))
psych<-transform(psych,Diag2=Diag2)
viewData(psych)
ada(psych[,c(2,3,5:37)],psych$Diag2)
boost$fit
boost <- ada(psych[,c(2,3,5:37)],psych$Diag2)
boost$fit
err <- c()
for (i in 1:100)
{
boost <- ada(psych[,c(2,3,5:37)],psych$Diag2)
err[i] <- sum(boost$fit != psych$Diag2)/103
}
err <- c()
for (i in 1:100)
{
boost <- ada(psych[,c(2,3,5:37)],psych$Diag2,iter=i)
err[i] <- sum(boost$fit != psych$Diag2)/103
}
plot(1:100,err)
abline(lm(boost ~ err))
abline(lm(1:100 ~ err))
abline(lm(I(1:100) ~ err))
err
err <- c()
for (i in 25:75)
{
boost <- ada(psych[,c(2,3,5:37)],psych$Diag2,iter=i,type="real")
err[i] <- sum(boost$fit != psych$Diag2)/103
}
err <- c()
for (i in 1:20)
{
boost <- ada(psych[,c(2,3,5:37)],psych$Diag2,bag.frac=0.05*i)
err[i] <- sum(boost$fit != psych$Diag2)/103
}
plot(0.05*1:20,err)
source('C:/Users/Shanbogen/Dropbox/Data Mining/adaboosting.R')
obesity <- read.csv("~/Schoolwork/MathModeling/projectdata/obesity.csv")
viewData(obesity)
obes_diffs <- read.csv("~/Schoolwork/MathModeling/projectdata/obes_diffs.csv")
viewData(obes_diffs)
borders <- read.csv("~/Schoolwork/MathModeling/projectdata/borders.csv")
viewData(borders)
incomingdegrees <- rep(0,190)
incomingdifftotal <- rep(0,190)
incomingratetotal <- rep(0,190)
for (i in 1:190)
{
#find the corresponding imports entry
index <- which(as.character(borders$Country) == as.character(obesity$Country)[i])
#for each country in the list, add those countries to incoming, and add this country to their outgoing
for (j in 1:190)
{
if (!is.na(str_locate(borders$Bordering_countries[index],as.character(obesity$Country[j]))[1]))
{
incomingdegrees[i] = incomingdegrees[i] + 1
incomingdifftotal[i] = incomingdifftotal[i] + abs(obesity$obrate[i] - obesity$obrate[j])
incomingratetotal[i] = incomingratetotal[i] + obesity$obrate[j]
}
}
}
border_differential <- incomingdifftotal/incomingdegrees
border_average <- incomingratetotal/incomingdegrees
for (i in 1:190)
{
if (is.na(in_export_differential[i]))
{
in_export_differential[i] <- NA
}
}
incomingdegrees <- rep(0,190)
incomingdifftotal <- rep(0,190)
incomingratetotal <- rep(0,190)
for (i in 1:190)
{
#find the corresponding imports entry
index <- which(as.character(borders$Country) == as.character(obesity$Country)[i])
#for each country in the list, add those countries to incoming, and add this country to their outgoing
for (j in 1:190)
{
if (!is.na(str_locate(borders$Bordering_countries[index],as.character(obesity$Country[j]))[1]))
{
incomingdegrees[i] = incomingdegrees[i] + 1
incomingdifftotal[i] = incomingdifftotal[i] + abs(obesity$obrate[i] - obesity$obrate[j])
incomingratetotal[i] = incomingratetotal[i] + obesity$obrate[j]
}
}
}
border_differential <- incomingdifftotal/incomingdegrees
border_average <- incomingratetotal/incomingdegrees
for (i in 1:190)
{
if (is.na(border_differential[i]))
{
border_differential[i] <- NA
}
}
for (i in 1:190)
{
if (is.na(border_average[i]))
{
border_average[i] <- NA
}
}
border_differential
border_average
incomingdegrees <- rep(0,190)
incomingdifftotal <- rep(0,190)
incomingratetotal <- rep(0,190)
for (i in 1:190)
{
#find the corresponding imports entry
index <- which(as.character(borders$Country) == as.character(obesity$Country)[i])
#for each country in the list, add those countries to incoming, and add this country to their outgoing
for (j in 1:190)
{
if (!is.na(str_locate(borders$Bordering_countries[index],as.character(obesity$Country[j]))[1]))
{
incomingdegrees[i] = incomingdegrees[i] + 1
incomingdifftotal[i] = incomingdifftotal[i] + abs(obesity$obrate[i] - obesity$obrate[j])
incomingratetotal[i] = incomingratetotal[i] + obesity$obrate[j]
}
}
}
border_differential <- incomingdifftotal/incomingdegrees
border_average <- incomingratetotal/incomingdegrees
require(stringr)
incomingdegrees <- rep(0,190)
incomingdifftotal <- rep(0,190)
incomingratetotal <- rep(0,190)
for (i in 1:190)
{
#find the corresponding imports entry
index <- which(as.character(borders$Country) == as.character(obesity$Country)[i])
#for each country in the list, add those countries to incoming, and add this country to their outgoing
for (j in 1:190)
{
if (!is.na(str_locate(borders$Bordering_countries[index],as.character(obesity$Country[j]))[1]))
{
incomingdegrees[i] = incomingdegrees[i] + 1
incomingdifftotal[i] = incomingdifftotal[i] + abs(obesity$obrate[i] - obesity$obrate[j])
incomingratetotal[i] = incomingratetotal[i] + obesity$obrate[j]
}
}
}
border_differential <- incomingdifftotal/incomingdegrees
border_average <- incomingratetotal/incomingdegrees
border_differential
border_average
sum(is.na(obesity$USborderdegrees_wtd_bl))
sum(is.na(border_average))
plot(border_average,obrate)
attach(obesity)
plot(border_average,obrate)
plot(border_differential,obrate)
summary(lm(obrate ~ border_average))
summary(lm(obrate ~ border_differential))
abline(lm(obrate ~ border_differential))
obesity <- transform(obesity,border_avg = border_average,border_diff = border_differential)
viewData(obesity)
for (i in 1:190)
{
if (is.na(border_differential[i]))
{
border_differential[i] <- NA
}
}
for (i in 1:190)
{
if (is.na(border_average[i]))
{
border_average[i] <- NA
}
}
obesity <- transform(obesity,border_avg = border_average,border_diff = border_differential)
viewData(obesity)
stuff <- uwchildren
stuff[6] <- 2.0
obesity <- transform(obesity,uwchildren=stuff)
viewData(obesity)
plot(incomingdegrees,obrate)
summary(lm(obrate ~ incomingdegrees))
abline(lm(obrate ~ incomingdegrees))
island <- c()
for (i in 1:190)
{
if (incomingdegrees[i] == 0)
{
island[i] = 1
}
else if (incomingdegrees[i] !=0)
{
island[i] = 0
}
}
plot(island,obrate)
summary(lm(obrate ~ island))
cor(island,incomingdegrees)
plot(incomingdegrees,island)
incomingdegrees
island
boxplot(incomingdegrees,island)
plot(island,incomingdegrees)
obesity <- transform(obesity,degree = incomingdegrees)
viewData(obesity)
summary(lm(obrate ~ degree))
attach(obrate)
attach(obesity)
summary(lm(obrate ~ degree))
summary(lm(obrate ~ border_diff))
summary(lm(obrate ~ border_avg))
summary(lm(obrate ~ in_import_differential))
summary(lm(obrate ~ out_export_differential))
summary(lm(obrate ~ UWimportdegrees_wtd_per))
summary(lm(obrate ~ USimportdegrees_wtd_per))
summary(lm(obrate ~ log(log(USimportdegrees_wtd_per))))
summary(lm(obrate ~ uwchildren))
summary(lm(obrate ~ sqrt(uwchildren)))
country <- read.csv("~/Schoolwork/Databases/finalproj/country.csv", header=F)
viewData(country)
model <- lm(V2 ~ V4)
model <- lm(V2 ~ V4,data=country)
summary(model)
plot(country$V4,country$V2)
abline(model)
attach(country)
beta1 <- sum(V2 - mean(V2))
beta1 <- sum((V2 - mean(V2))*(V4-mean(V4))/(V2-mean(V2))^2)
beta1
V2-mean(V2)
(V2-mean(V2))^2
sum((V2-mean(V2))^2)
beta1 <- sum((V2 - mean(V2))*(V4-mean(V4))/(V4-mean(V4))^2)
beta1
beta0 <- avg(V2) - beta1*avg(V4)
beta0 <- mean(V2) - beta1*mean(V4)
beta0
?lm
model$fitted.values
summary(model)
16.95 - 0.001174*500
16.95 - 0.001174*20300
avg(V4)
mean(V4)
mean(V2) + 0.0001*mean(V4)
summary(model)
y <- c(1,4,2,8,5,9,2)
x <- c(2,8,9,4,12,1,7)
z <- y*x
z
model <- lm(z ~ x + y)
summary(model)
plot(model)
plot(x,y)
plot(x*y,z)
plot(x*y + x + y,z)
model <- lm(z ~ x:y)
summary(model)
model <- lm(z ~ x*y)
summary(model)
model <- lm(z ~ x + y + x*y)
plot(model)
plot(z,model$predicted)
z
model$predicted
?lm
plot(z,model$fitted.values)
model$fitted.values
attach(country)
country <- read.csv("~/Schoolwork/Databases/finalproj/country.csv", header=F)
viewData(country)
attach(country)
summary(lm(V2 ~V6))
plot(V6,V2)
lm(V2~V6)$fitted.values
summary(lm(V2 ~V8))
summary(lm(V2 ~V6))
forest <- randomForest(psych[c(2,3,5:37)],factor(psych$Diag2),ntree=50,mtry=20,norm.votes=FALSE)
scz_messups <- 0
bpd_messups <- 0
for (i in 1:103)
{
if ((forest$votes[i,1] > forest$votes[i,2]) && psych$Diag[i]==2)
{
scz_messups = scz_messups + 1
}
if ((forest$votes[i,1] > forest$votes[i,2]) && psych$Diag[i]==3)
{
scz_messups = scz_messups + 1
}
}
print(scz_messups)
print(bpd_messups)
require(randomForest)
rm(psych)
require(randomForest)
psych <- read.csv("psych.csv")
psych<-transform(psych,Diag2=c(rep(0,32),rep(1,71)))
psych<-transform(psych,Diag3=c(rep(NA,32),rep(0,31),rep(1,40)))
psych <- read.csv("psych.csv")
obesity <- read.csv("~/Schoolwork/MathModeling/projectdata/obesity.csv")
viewData(obesity)
require(stringr)
incomingdegrees <- rep(0,190)
incomingdifftotal <- rep(0,190)
incomingratetotal <- rep(0,190)
for (i in 1:190)
{
#find the corresponding imports entry
index <- which(as.character(borders$Country) == as.character(obesity$Country)[i])
#for each country in the list, add those countries to incoming, and add this country to their outgoing
for (j in 1:190)
{
if (!is.na(str_locate(borders$Bordering_countries[index],as.character(obesity$Country[j]))[1]))
{
incomingdegrees[i] = incomingdegrees[i] + 1
incomingdifftotal[i] = incomingdifftotal[i] + abs(obesity$obrate[i] - obesity$obrate[j])
incomingratetotal[i] = incomingratetotal[i] + obesity$obrate[j]
}
}
}
border_differential <- incomingdifftotal/incomingdegrees
border_average <- incomingratetotal/incomingdegrees
for (i in 1:190)
{
if (is.na(border_differential[i]))
{
border_differential[i] <- NA
}
}
for (i in 1:190)
{
if (is.na(border_average[i]))
{
border_average[i] <- NA
}
}
island <- c()
for (i in 1:190)
{
if (incomingdegrees[i] == 0)
{
island[i] = 1
}
else if (incomingdegrees[i] !=0)
{
island[i] = 0
}
}
setwd("C:/Users/Shanbogen/Downloads/obesitypredict")
setwd("C:/Users/Shanbogen/Downloads/obesity_predict")
library(obesitypredict)
?transform
